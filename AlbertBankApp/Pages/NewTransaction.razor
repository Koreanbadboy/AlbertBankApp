@page "/NewTransaction"
@inject IAccountService AccountService

<!-- Linq command for filter of date-->
<h3>Överföring</h3>

@if (_accounts == null || _accounts.Count < 2)
{
    <p>Skapa minst 2 konton för att göra en transaktion.</p>
}
else
{
    <EditForm Model="_transferModel" OnValidSubmit="HandleTransfer">

        <!-- From Account dropdown -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="fromAccount" class="form-label">Från konto</label>
            <InputSelect id="fromAccount" class="form-select" @bind-Value="_transferModel.FromAccountId" @bind-Value:after="FromAccountChanged">
                <option value="@Guid.Empty">Välj konto</option>
                @foreach (var account in _accounts)
                {
                    <option value="@account.Id">@account.Name (@account.InitialBalance.ToString("C"))</option>
                }
            </InputSelect>
        </div>
        
        <!-- To Account dropdown -->
        <div class="mb-3" style="max-width: 400px;">
            <label for="toAccount" class="form-label">Till konto</label>
            <InputSelect id="toAccount" class="form-select" @bind-Value="_transferModel.ToAccountId">
                <option value="@Guid.Empty">Välj konto</option>
                @foreach (var account in _toAccounts)
                {
                    <option value="@account.Id">@account.Name (@account.InitialBalance.ToString("C"))</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3" style="max-width: 400px;">
            <label for="amount" class="form-label">Belopp</label>
            <InputNumber id="amount" class="form-control" @bind-Value="_transferModel.Amount" />
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger">@_errorMessage</div>
        }

        <button type="submit" class="btn btn-primary">Överför</button>
        <br/>
        
        <!-- Transaction history -->
        
        @if (_history.Any())
        {
            <h4 class="mt-4">Transaktionshistorik</h4>
            <table class="table" style="max-width: 900px;">
                <thead>
                    <tr>
                        <th>Datum</th>
                        <th>Från konto</th>
                        <th>Till konto</th>
                        <th>Belopp</th>
                        <th></th> <!-- Column for delete button -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in _history.OrderByDescending(t => t.TimeStamp))
                    {
                        <tr>
                            <td>@transaction.TimeStamp.ToString("g")</td>
                            <td>@transaction.FromAccountName</td>
                            <td>@transaction.ToAccountName</td>
                            <td>@transaction.Amount.ToString("C")</td>
                            
                            <!-- Delete button -->
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTranscation(transaction)">Ta bort</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </EditForm>
}

@code {
    
    /// <summary>
    /// List of bank accounts for the user
    /// </summary>
    private List<BankAccount> _accounts = new();
    private List<BankAccount> _toAccounts = new();
    private TransferModel _transferModel = new();
    private string? _errorMessage;
    private List<Transaction> _history = new();

    /// <summary>
    /// Loads accounts and transaction history on initialization
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _accounts = (await AccountService.GetAccountsAsync()).ToList();
        _toAccounts = _accounts;
        _history = _accounts.SelectMany(a => a.Transactions).OrderByDescending(t => t.TimeStamp).ToList();
    }
    
    /// <summary>
    /// Updates the ToAccount list when FromAccount changes
    /// </summary>
    private void FromAccountChanged()   
    {
        _toAccounts = _accounts.Where(a => a.Id != _transferModel.FromAccountId).ToList();
        if (_toAccounts.All(a => a.Id != _transferModel.ToAccountId))
        {
            _transferModel.ToAccountId = Guid.Empty;
        }
        StateHasChanged();
    }
    
    /// <summary>
    /// Handles the transfer submission
    /// </summary>
    private async Task HandleTransfer()
    {
        _errorMessage = null;

        try
        {
            await AccountService.TransferAsync(
                _transferModel.FromAccountId,
                _transferModel.ToAccountId,
                _transferModel.Amount);

            // Ladda om konton & historik
            _accounts = (await AccountService.GetAccountsAsync()).ToList();
            _toAccounts = _accounts.Where(a => a.Id != _transferModel.FromAccountId).ToList();
            _history = _accounts.SelectMany(a => a.Transactions)
                .OrderByDescending(t => t.TimeStamp)
                .ToList();

            // (Valfritt) nolla formuläret
            _transferModel.Amount = 0;
            _transferModel.ToAccountId = Guid.Empty;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message; // fel visas om något går fel i TransferAsync
        }
    }

    /// <summary>
    /// Deletes a transaction
    /// </summary>
    /// <param name="transaction"></param>
    private async Task DeleteTranscation(Transaction transaction)
    {
        await AccountService.DeleteTransactionAsync(transaction.Id);
        _accounts = (await AccountService.GetAccountsAsync()).ToList();
        _history = _accounts.SelectMany(a => a.Transactions).OrderByDescending(t => t.TimeStamp).ToList();
    }
    
    /// <summary>
    ///  Model for transfer form
    /// </summary>
    public class TransferModel
    {
        public Guid FromAccountId { get; set; }
        public Guid ToAccountId { get; set; }
        public decimal Amount { get; set; }
    }
}
