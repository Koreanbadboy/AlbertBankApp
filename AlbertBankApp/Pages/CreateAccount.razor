@page "/CreateAccount"
@using Microsoft.AspNetCore.Components.Forms
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h3>Skapa konto</h3>

<!-- Success message when account is created -->
@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success" role="alert">
        @_successMessage
    </div>
}

<EditForm EditContext="_editContext" OnSubmit="HandleSubmit">
    
    <!-- Name input -->
    <div class="mb-2" style="max-width:420px;">
        <label for="nameInput">Namn</label>
        <InputText id="nameInput" class="form-control" @bind-Value="_model.Name" />
        <ValidationMessage For="@(() => _model.Name)" />
    </div>
    
    <!-- Choosing account type -->
    <div class="mb-2" style="max-width: 420px">
        <label for="typeSelect">Kontotyp</label>
        <InputSelect id="typeSelect" class="form-select" @bind-Value="_model.Type">
            @foreach (var t in Enum.GetValues<AccountType>())
            {
                <option value="@t">@t</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _model.Type)" />
    </div>
    
    <!-- Choosing currency -->
    <div class="mb-2" style="max-width: 420px">
        <label for="currencySelect">Valuta</label>
        <InputSelect id="currencySelect" class="form-select" @bind-Value="_model.Currency">
            @foreach (var c in Enum.GetValues<CurrencyType>())
            {
                <option value="@c">@c</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _model.Currency)" />
    </div>
    
    <!-- Starting balance for account -->
    <div class="mb-2" style="max-width: 420px">
        <label for="balanceInput">Startsaldo</label>
        <InputNumber id="balanceInput" class="form-control" @bind-Value="_model.InitialBalance" />
        <ValidationMessage For="@(() => _model.InitialBalance)" />
    </div>
    
    <!-- Interest rate (only for Sparkonto) -->
    @if (_model.Type == AccountType.Sparkonto)
    {
        <div class="mb-2" style="max-width: 420px">
            <label for="interestInput">Ränta (%)</label>
            <InputNumber id="interestInput" class="form-control" @bind-Value="_model.InterestRate" />
            <ValidationMessage For="@(() => _model.InterestRate)" />
        </div>
    }
    
    <!-- Create account button -->
    <button type="submit" class="btn btn-primary mt-2">Skapa konto</button>
</EditForm>

<br/>

<!-- Table for created account(s) -->
<h3>Konton:</h3>
@if (_accounts.Any())
{
    <table class="table" style="max-width: 900px;">
        <thead>
            <tr>
                <th>Namn</th>
                <th>Typ</th>
                <th>Valuta</th>
                <th>Saldo</th>
                <th>Ränta</th>
                <th>Ränta</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var account in _accounts)
        {
            <tr>
                <td>@account.Name</td>
                <td>@account.AccountType</td>
                <td>@account.Currency</td>
                <td>@account.Balance.ToString("N2")</td>
                
                <!-- Showing interest procent -->
                <td>
                    @(account.InterestRate.HasValue ? (account.InterestRate.Value * 100).ToString("N2") + " %" : "-")
                </td>
                
                <td>
                    @if (account.AccountType == AccountType.Sparkonto)
                    {
                        <div class="input-group input-group-sm" style="max-width: 120px;">
                            <button class="btn btn-outline-secondary btn-sm"
                                    @onclick="() => DecreaseAccountInterest(account.Id)">-</button>
                            <span class="form-control text-center" style="padding: 0.25rem 0.5rem;">
                                @(account.InterestRate.HasValue ? (account.InterestRate.Value * 100).ToString("N2") + " %" : "-")
                            </span>
                            <button class="btn btn-outline-secondary btn-sm"
                                    @onclick="() => IncreaseAccountInterest(account.Id)">+</button>
                        </div>
                    }
                    else
                    {
                        @(account.InterestRate.HasValue ? (account.InterestRate.Value * 100).ToString("N2") + " %" : "-")
                    }
                </td>
                
                <!-- Delete button -->
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteAccountAsync(account.Id)">Ta bort</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Inga konton skapade än.</p>
}

@code {
    
    /// <summary>
    /// Model for creating a new account
    /// </summary>
    private CreateAccountModel _model = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _messages;

    private string? _successMessage;
    private IReadOnlyList<BankAccount> _accounts = Array.Empty<BankAccount>();
    
    /// <summary>
    ///  Initializes the component and loads existing accounts
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_model);
        _messages = new ValidationMessageStore(_editContext);
        await LoadAccountsAsync();
    }

    /// <summary>
    /// Model for creating a new account
    /// </summary>
    private class CreateAccountModel
    {
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; }
        public CurrencyType Currency { get; set; } = CurrencyType.SEK;
        public decimal InitialBalance { get; set; } = 0;
        public decimal? InterestRate { get; set; }
    }
    
    /// <summary>
    /// Loads the list of accounts
    /// </summary>
    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }
    
    /// <summary>
    ///  Handles the form submission for creating a new account
    /// </summary>
    /// <param name="_"></param>
    private async Task HandleSubmit(EditContext _)
    {
        _messages!.Clear();
        if (string.IsNullOrWhiteSpace(_model.Name))
        {
            _messages.Add(() => _model.Name, "Namn på kontot är obligatoriskt.");
        }
        else if (_model.Name.Length > 50)
        {
            _messages.Add(() => _model.Name, "Namn på kontot får inte överstiga 50 tecken.");
        }

        if (_model.InitialBalance < 0)
        {
            _messages.Add(() => _model.InitialBalance, "Saldot kan inte vara negativt.");
        }
        if (_editContext!.GetValidationMessages().Any())
        {
            StateHasChanged();
            return;
        }
        if (_model.Type == AccountType.Sparkonto && _model.InterestRate.HasValue) //ser till att räntan blir rätt procent
        {
            _model.InterestRate /= 100m;
        }
        
        // Create the account
        await ((AccountService)AccountService).CreateAccountAsync(
            name: _model.Name,
            accountType: _model.Type,
            currency: _model.Currency,
            initialBalance: _model.InitialBalance,
            interestRate: _model.InterestRate
        );
        
        // Show success message and reset form
        _successMessage = $"Kontot '{_model.Name}' har skapats.";
        _model = new CreateAccountModel();
        _editContext = new EditContext(_model);
        _messages = new ValidationMessageStore(_editContext);

        await LoadAccountsAsync();
        StateHasChanged();
    }
    
    /// <summary>
    /// Deletes an account
    /// </summary>
    /// <param name="accountId">Specific Account-ID</param>
    private async Task DeleteAccountAsync(Guid accountId)
    {
        await AccountService.DeleteAccountAsync(accountId);
        await LoadAccountsAsync();
        StateHasChanged();
    }
    
    /// <summary>
    ///  Increases the interest rate of an account by 1%
    /// </summary>
    /// <param name="accountId">Specific Account-ID</param>
    private async Task IncreaseAccountInterest(Guid accountId)
    {
        await AccountService.ChangeInterestAsync(accountId, 0.01m); // Increase by 1%
        await LoadAccountsAsync();
    }
    
    /// <summary>
    ///  Decreases the interest rate of an account by 1%
    /// </summary>
    /// <param name="accountId">Specific Account-ID</param>
    private async Task DecreaseAccountInterest(Guid accountId)
    {
        await AccountService.ChangeInterestAsync(accountId, -0.01m); // Decrease by 1%
        await LoadAccountsAsync();
    }
}