@page "/CreateAccount"
@using Microsoft.AspNetCore.Components.Forms
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h3>Skapa konto</h3>

@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success" role="alert">
        @_successMessage
    </div>
}

<EditForm EditContext="_editContext" OnSubmit="HandleSubmit">

    <div class="mb-2">
        <label for="nameInput">Namn</label>
        <InputText id="nameInput" class="form-control" @bind-Value="_model.Name" />
        <ValidationMessage For="@(() => _model.Name)" />
    </div>

    <div class="mb-2">
        <label for="typeSelect">Kontotyp</label>
        <InputSelect id="typeSelect" class="form-select" @bind-Value="_model.Type">
            @foreach (var t in Enum.GetValues<AccountType>())
            {
                <option value="@t">@t</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _model.Type)" />
    </div>

    <div class="mb-2">
        <label for="currencySelect">Valuta</label>
        <InputSelect id="currencySelect" class="form-select" @bind-Value="_model.Currency">
            @foreach (var c in Enum.GetValues<CurrencyType>())
            {
                <option value="@c">@c</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _model.Currency)" />
    </div>

    <div class="mb-2">
        <label for="balanceInput">Startsaldo</label>
        <InputNumber id="balanceInput" class="form-control" @bind-Value="_model.InitialBalance" />
        <ValidationMessage For="@(() => _model.InitialBalance)" />
    </div>
    
    <!-- ränta endast för sparkonto -->
    @if (_model.Type == AccountType.Sparkonto)
    {
        <div class="mb-2">
            <label for="interestInput">Ränta (%)</label>
            <InputNumber id="interestInput" class="form-control" @bind-Value="_model.InterestRate" />
            <ValidationMessage For="@(() => _model.InterestRate)" />
        </div>
    }

    <button type="submit" class="btn btn-primary mt-2">Skapa konto</button>
</EditForm>

<br/>

<h3>Konton:</h3>
@if (_accounts.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Namn</th>
                <th>Typ</th>
                <th>Valuta</th>
                <th>Saldo</th>
                <th>Ränta</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var account in _accounts)
        {
            <tr>
                <td>@account.Name</td>
                <td>@account.AccountType</td>
                <td>@account.Currency</td>
                <td>@account.Balance.ToString("N2")</td>
                <td>
                    @(account.InterestRate.HasValue ? (account.InterestRate.Value * 100).ToString("N2") + " %" : "-")
                </td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteAccountAsync(account.Id)">Ta bort</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Inga konton skapade än.</p>
}

@code {
    private CreateAccountModel _model = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _messages;

    private string? _successMessage;
    private IReadOnlyList<BankAccount> _accounts = Array.Empty<BankAccount>();

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_model);
        _messages = new ValidationMessageStore(_editContext);
        await LoadAccountsAsync();
    }

    private class CreateAccountModel
    {
        public string Name { get; set; } = string.Empty;
        public AccountType Type { get; set; }
        public CurrencyType Currency { get; set; } = CurrencyType.SEK;
        public decimal InitialBalance { get; set; }
        public decimal? InterestRate { get; set; } 
    }

    private async Task LoadAccountsAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }

    private async Task HandleSubmit(EditContext _)
    {
        // Rensa gamla fel
        _messages!.Clear();

        // --- Manuell if-validering ---
        if (string.IsNullOrWhiteSpace(_model.Name))
        {
            _messages.Add(() => _model.Name, "Namn på kontot är obligatoriskt.");
        }
        else if (_model.Name.Length > 50)
        {
            _messages.Add(() => _model.Name, "Namn på kontot får inte överstiga 50 tecken.");
        }

        if (_model.InitialBalance < 0)
        {
            _messages.Add(() => _model.InitialBalance, "Saldot kan inte vara negativt.");
        }

        // Fler regler? Lägg dem här, t.ex. förbjudna tecken, unikt namn, etc.
        // if (!Regex.IsMatch(_model.Name, "^[\\p{L}0-9 ._-]+$")) { ... }

        // Om det finns några fel -> visa och avbryt
        if (_editContext!.GetValidationMessages().Any())
        {
            StateHasChanged();
            return;
        }
        if (_model.Type == AccountType.Sparkonto && _model.InterestRate.HasValue) //ser till att räntan blir rätt procent
        {
        _model.InterestRate /= 100m;
        }
        
        
        

        // --- Skapa konto ---
        await AccountService.CreateAccountAsync(
            _model.Name,
            _model.Type,
            _model.Currency,
            _model.InitialBalance,
            _model.InterestRate
        );

        _successMessage = $"Kontot '{_model.Name}' har skapats.";

        // Reset form (måste skapa ny model + ny EditContext för att nollställa validering)
        _model = new CreateAccountModel();
        _editContext = new EditContext(_model);
        _messages = new ValidationMessageStore(_editContext);

        await LoadAccountsAsync();
        StateHasChanged();
    }

    private async Task DeleteAccountAsync(Guid accountId)
    {
        await AccountService.DeleteAccountAsync(accountId);
        await LoadAccountsAsync();
        StateHasChanged();
    }
}
