@page "/History"
@using AlbertBankApp.Domain
@using AlbertBankApp.Interfaces
@using AlbertBankApp.Services
@inject IAccountService AccountService  
@inject ILocalStorageService LocalStorageService

<!-- konto -->
<div class="mb-3" style="max-width: 420px;">
    <label class="form-label">Välj konto..</label>
    <InputSelect @bind-Value="SelectedAccountId" class="form-select">
        <option value="">-- Alla konton --</option> <!-- Ändrat från "Välj ett konto" för att visa alla transaktioner som standard -->
        @foreach (var account in _accounts)
        {
            <option value="@account.Id">@account.Name</option>
        }
    </InputSelect>
</div>

<!-- Historik -->
@if (_transactions is null)
{
    <div class="alert alert-light border" style="max-width: 720px;">
        Laddar transaktioner... <!-- Visar laddningsmeddelande medan transaktioner hämtas -->
    </div>
}
else if (!_transactions.Any())
{
    <div class="alert alert-light border" style="max-width: 720px;">
        Inga transaktioner hittades. <!-- Ändrat meddelande för att passa både specifika konton och alla konton -->
    </div>
}
else
{
    <!-- Lista för valt konto eller alla konton -->
    <div class="table-responsive" style="max-width: 900px;">
        <table class="table table-striped align-middle">
            <thead class="table-light">
            <tr>
                <!-- Klickbar datumkolumn för sortering - tillagd idag -->
                <th style="cursor: pointer; user-select: none;" @onclick="ToggleDateSort">
                    Datum @(_sortDescending ? "▼" : "▲") <!-- Visar sorteringsordning med pilar -->
                </th>
                <th>Typ</th> <!-- Visar "Överfört"/"Mottaget" för specifikt konto, "Överföring"/"Insättning"/"Uttag" för alla konton -->
                <th class="text-end">Belopp</th>
                <th>Motpart</th> <!-- Ändrat från "Från → Till" för att göra det tydligare -->
                <th>Beskrivning</th> <!-- Ändrat från "Anteckningar" -->
            </tr>
            </thead>
            <tbody>
            @foreach (var tx in GetSortedTransactions()) //<!-- Använder sorteringsmetod istället för direkt OrderByDescending -->
            {
                <tr>
                    <td>@tx.TimeStamp.ToLocalTime().ToString("yyyy-MM-dd")</td> <!--Visar bara datum utan tid -->
                    <td>@GetTransactionTypeForDisplay(tx)</td> <!--Dynamisk typ baserad på valt konto -->
                    <td class="text-end @AmountTone(tx)">@FormatAmount(tx)</td> <!--Röd för utgående, grön för inkommande -->
                    <td>@GetOtherPartyName(tx)</td> <!--/>Visar motparten i transaktionen -->
                    <td>@tx.Note</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private List<BankAccount> _accounts = new();
    private List<Transaction>? _transactions = null; // Null = laddar, tom lista = inga transaktioner
    private string? _errorMessage;
    private string _selectedAccountIdString = string.Empty;
    private bool _sortDescending = true; // Default: nyaste först - tillagd för sorteringsfunktionalitet

    // Property med logik för att spara valt konto till localStorage
    private string SelectedAccountId
    {
        get => _selectedAccountIdString;
        set
        {
            if (_selectedAccountIdString != value)
            {
                _selectedAccountIdString = value;
                // Spara valt konto till localStorage så det kommer ihåg vid sidladdning
                _ = LocalStorageService.SetItemAsync("selectedAccountId", value);
                _ = LoadTransactionsAsync();
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _accounts = (await AccountService.GetAccountsAsync()).ToList();
            
            // Ladda sparat konto från localStorage - tillagd idag
            var saved = await LocalStorageService.GetItemAsync<string>("selectedAccountId");
            if (!string.IsNullOrEmpty(saved))
                _selectedAccountIdString = saved;
        }
        catch (Exception ex)
        {
            _errorMessage = $"FEL vid hämtning av konton: {ex.Message}";
        }
        // Ladda transaktioner för alla konton som standard - ändrat från att inte ladda något
        _ = LoadTransactionsAsync();
    }

    // Ny metod för att växla sorteringsordning
    private void ToggleDateSort()
    {
        _sortDescending = !_sortDescending;
        StateHasChanged();
    }

    // Ny metod som returnerar sorterade transaktioner baserat på vald ordning
    private IEnumerable<Transaction> GetSortedTransactions()
    {
        if (_transactions == null) return Enumerable.Empty<Transaction>();
        
        return _sortDescending 
            ? _transactions.OrderByDescending(t => t.TimeStamp)
            : _transactions.OrderBy(t => t.TimeStamp);
    }

    // Uppdaterad metod - hämtar nu transaktioner för alla konton när inget specifikt konto är valt
    private async Task LoadTransactionsAsync()
    {    
        if (!Guid.TryParse(SelectedAccountId, out var accountId))
        {
            // Om inget konto är valt, ladda transaktioner för alla konton
            if (!_accounts.Any())
            {
                _transactions = new List<Transaction>();
                StateHasChanged();
                return;
            }

            _transactions = null; // Markera som "laddar"
            _errorMessage = null;
            StateHasChanged();

            try
            {
                // Hämta transaktioner parallellt för alla konton
                var tasks = _accounts.Select(a => AccountService.GetTransactionsAsync(a.Id));
                var results = await Task.WhenAll(tasks);
                _transactions = results.SelectMany(r => r).ToList(); // Slå ihop alla transaktioner
            }
            catch (Exception ex)
            {
                _errorMessage = $"Ett fel inträffade vid hämtning av transaktioner: {ex.Message}";
                _transactions = new List<Transaction>();
            }
            finally
            {
                StateHasChanged();
            }

            return;
        }
        
        // Ladda transaktioner för specifikt konto
        _transactions = null;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            _transactions = (await AccountService.GetTransactionsAsync(accountId)).ToList();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Ett fel inträffade vid hämtning av transaktioner: {ex.Message}";
            _transactions = new List<Transaction>();
        }
        finally
        {
            StateHasChanged();
        }
    }

    // Ny metod - visar motparten i transaktionen (det andra kontot)
    private string GetOtherPartyName(Transaction tx)
    {
        var fromName = AccountName(tx.FromAccountId);
        var toName = AccountName(tx.ToAccountId);

        if (Guid.TryParse(SelectedAccountId, out var accountId))
        {
            // Om ett specifikt konto är valt, visa bara motparten
            if (tx.FromAccountId == accountId) return toName; // Vi skickade, visa mottagaren
            if (tx.ToAccountId == accountId) return fromName; // Vi tog emot, visa avsändaren
        }
        
        // För "Alla konton"-vyn, visa både från och till
        return $"{fromName} → {toName}";
    }

    // Uppdaterad metod - visar nu dynamisk typ baserad på valt konto och transaktionsriktning
    private string GetTransactionTypeForDisplay(Transaction tx)
    {
        var isToInternal = tx.ToAccountId.HasValue && _accounts.Any(a => a.Id == tx.ToAccountId.Value);
        var isFromInternal = tx.FromAccountId.HasValue && _accounts.Any(a => a.Id == tx.FromAccountId.Value);

        if (Guid.TryParse(SelectedAccountId, out var accountId))
        {
            // För specifikt konto: visa bara "Överfört" eller "Mottaget"
            if (tx.FromAccountId == accountId)
            {
                return "Överfört";
            }
            if (tx.ToAccountId == accountId)
            {
                return "Mottaget";
            }
        }
        
        // För "Alla konton"-vyn: visa mer detaljerad information
        if (isFromInternal && isToInternal)
        {
            return "Överföring"; // Intern överföring mellan egna konton
        }
        if (isFromInternal)
        {
            return "Uttag"; // Pengar ut från ett internt konto till externt
        }
        if (isToInternal)
        {
            return "Insättning"; // Pengar in till ett internt konto från externt
        }

        return tx.TransactionType.ToString(); // Fallback
    }

    // Hjälpmetod för att hämta kontonamn
    private string AccountName(Guid? accountId)
    {
        if (!accountId.HasValue || accountId.Value == Guid.Empty)
            return "Extern"; // Ändrat från "N/A" för tydligare text

        var acc = _accounts.FirstOrDefault(a => a.Id == accountId.Value);
        if (acc != null)
            return acc.Name;

        return "Okänt konto";
    }

    // Uppdaterad metod - visar nu belopp utan +/- tecken (färgen visar riktningen istället)
    private string FormatAmount(Transaction tx)
    {
        if (!Guid.TryParse(SelectedAccountId, out var parsedAccountId))
            return tx.Amount.ToString("C");

        return Math.Abs(tx.Amount).ToString("C"); // Ändrat: tar bort tecknet, använder färg istället
    }

    // Metod för att bestämma färg på beloppet (röd för utgående, grön för inkommande)
    private string AmountTone(Transaction tx)
    {
        if (!Guid.TryParse(SelectedAccountId, out var parsedAccountId))
            return string.Empty;

        return tx.FromAccountId == parsedAccountId ? "text-danger" : "text-success";
    }
}
